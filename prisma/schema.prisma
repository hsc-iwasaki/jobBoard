generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password   String?
  ruby       String?
  birthday   String?
  gender     String?
  address    String?
  tel        String?
  graduation String?
  role       UserRole?
  spouse     Boolean?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  bookmarks     Article[]
  accounts      Account[]
  sessions      Session[]
  applications Application[]
  companies    Company[] 

  @@map(name: "users")
}

enum UserRole {
  Admin
  JobSeeker
  Recruiter
}

model Company {
  id            Int    @id @default(autoincrement())
  recruiterId   Int
  name          String
  description   String?
  logo          String?
  website       String?
  contactEmail  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  recruiter     User    @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  jobs          Job[]
}

model Job {
  id          Int          @id @default(autoincrement())
  companyId   Int
  title       String
  description String
  location    String
  salary      String?
  type        JobType
  imageUrl    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications Application[]
}

enum JobType {
  FullTime
  Contract
  PartTime
}

model Application {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  status    ApplicationStatus
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])
}

enum ApplicationStatus {
  InProgress
  Completed
  Rejected
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  name       String?
  password   String?
  role       String?

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Article {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  users     User[]
}